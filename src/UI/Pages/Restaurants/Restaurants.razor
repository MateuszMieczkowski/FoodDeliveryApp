@page "/restaurants"
@page "/restaurants/{pageNumber:int}"
@inject IRestaurantApi RestaurantApi
@using UI.API
@using UI.API.Responses


@if (PagedResult is null)
{
    <div class="row mt-5">
        <Spinner></Spinner>
    </div>
}
else
{
    <div class="row">
        <h3 class="text-center">Restaurants</h3>
    </div>
    <div class="row mt-3 justify-content-end">
        <div class="col">
            <p class="text-end" style="font-size:12px;">@PagedResult.TotalCount Restaurants</p>
        </div>
        <div class="col">
           <PageSize OnPageSizeChanged="@OnPageSizeChangedAsync"></PageSize>
        </div>
        
    </div>
    foreach (var restaurant in PagedResult.Result)
    {
        <RestaurantCard Restaurant="@restaurant"></RestaurantCard>
    }
    <div class="row mt-3 justify-content-center">
         <Pagination CurrentPage="@PagedResult.CurrentPageNumber" PagesCount="@PagedResult.PageCount" Href="/restaurants"></Pagination>
    </div>
    
   
}

@code {

    [Parameter]
    public int? PageNumber { get; set; }

    public int PageSize { get; set; } = 10;

    private PagedResult<Restaurant>? PagedResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PagedResult = await RestaurantApi.GetRestaurants(null, null, null, null, 1, PageSize);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        PageNumber = PageNumber ?? 1;
        PagedResult = await RestaurantApi.GetRestaurants(null, null, null, null, PageNumber.Value, PageSize);
        StateHasChanged();
    }

    protected async Task OnPageSizeChangedAsync(int pageSize)
    {
        PageSize = pageSize;
        PageNumber = 1;
        PagedResult = await RestaurantApi.GetRestaurants(null, null, null, null, PageNumber.Value, PageSize);
        StateHasChanged();
    }

}

