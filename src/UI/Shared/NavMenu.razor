@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">UI</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@navMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="restaurants" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Restaurants
            </NavLink>
        </div>
        <div class="nav-item px-3 @hideLoginClass">
            <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        <div class="nav-item px-3 @hideRegisterClass">
            <NavLink class="nav-link" href="/register" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Register
            </NavLink>
        </div>
        <div class="nav-item px-3 @hideSignOutClass">
            <button class="btn btn-close-white @hideSignOutClass" onclick="@SignOut">SignOut</button>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? navMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string? hideLoginClass => UserService.IsAuthenticated ? "visually-hidden" : null;
    private string? hideRegisterClass => UserService.IsAuthenticated ? "visually-hidden" : null;
    private string? hideSignOutClass => !UserService.IsAuthenticated ? "visually-hidden" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task SignOut()
    {

        await UserService.SignOutAsync();
        NavigationManager.NavigateTo("/");
        StateContainer.NotifyStateChanged();
    }
    protected async override Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        await base.OnInitializedAsync();
    }
    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
